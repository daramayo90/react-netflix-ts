{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\damia\\\\OneDrive\\\\Escritorio\\\\1. Dami\\xE1n\\\\Estudio\\\\Programaci\\xF3n\\\\Web\\\\4. Personal\\\\Proyectos\\\\prueba\\\\frontend\\\\src\\\\auth\\\\AuthProvider.js\",\n    _s = $RefreshSig$();\n\n//Componente global que envuelve App desde Index\n//Luego, el Context.Provider es el que el envía la información a los children\nimport axios from 'axios';\nimport { createContext, useState, useEffect } from 'react'; // Se exporta para que archivos externos puedan consumir dicho contexto\n// Exportamos la instancia del objecto Context\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext(); // Creamos un componente Provider el cual recibe como props los children\n\nexport default function AuthProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [user, setUser] = useState(() => {\n    const val = window.localStorage.getItem('user');\n    if (val === 'true') return true;else return false;\n  }); //const [user, setUser] = useState({id: 1, username: \"daramayo\"});\n  //Cuando la función 'login' sea ejecutada, almacenará al usuario\n  //Las userCredentials serán envíadas al momento de hacer click en \"Sign In\" de la página \"Login\"\n  //Hacemos la petición a la API para que nos traiga la información completa del usuario\n  //Una vez nos llegue la información se establecerán en \"setUser\"\n\n  const login = async userCredentials => {\n    try {\n      await axios.post(\"auth/login\", userCredentials);\n      setUser(userCredentials);\n      window.localStorage.setItem('user', JSON.stringify(user));\n    } catch (error) {\n      console.log(error);\n    }\n  }; //Save credentials in Local Storage\n\n\n  useEffect(() => {\n    console.log(initialState);\n  }, [user]);\n\n  const logout = () => setUser(null); //Información que se quiere transmitir a los componentes hijos\n  //Todo debería estar memorizado\n  //El usuario será leído en App para saber si existe o no un usuario en session\n\n\n  const contextValue = {\n    user,\n    login,\n    logout\n  }; //El contextValue es el valor enviado a los hijos (children)\n  //En este caso, contextValue tiene un objeto llamado \"user\"\n  //Se crea el AuthContext y PROVEE el valor contextValue\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AuthProvider, \"mESKSSSY2ykxnS7gepA+rksD6To=\");\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["C:/Users/damia/OneDrive/Escritorio/1. Damián/Estudio/Programación/Web/4. Personal/Proyectos/prueba/frontend/src/auth/AuthProvider.js"],"names":["axios","createContext","useState","useEffect","AuthContext","AuthProvider","children","user","setUser","val","window","localStorage","getItem","login","userCredentials","post","setItem","JSON","stringify","error","console","log","initialState","logout","contextValue"],"mappings":";;;AAAA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD,C,CAGA;AACA;;;AACA,OAAO,MAAMC,WAAW,gBAAGH,aAAa,EAAjC,C,CAGP;;AACA,eAAe,SAASI,YAAT,OAAoC;AAAA;;AAAA,MAAd;AAAEC,IAAAA;AAAF,GAAc;AAC/C,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,MAAM;AACnC,UAAMO,GAAG,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,MAA5B,CAAZ;AACA,QAAIH,GAAG,KAAK,MAAZ,EAAoB,OAAO,IAAP,CAApB,KACS,OAAO,KAAP;AACZ,GAJ+B,CAAhC,CAD+C,CAQ/C;AAEA;AACA;AACA;AACA;;AACA,QAAMI,KAAK,GAAG,MAAOC,eAAP,IAA2B;AACrC,QAAI;AACA,YAAMd,KAAK,CAACe,IAAN,CAAW,YAAX,EAAyBD,eAAzB,CAAN;AACAN,MAAAA,OAAO,CAACM,eAAD,CAAP;AACAJ,MAAAA,MAAM,CAACC,YAAP,CAAoBK,OAApB,CAA4B,MAA5B,EAAoCC,IAAI,CAACC,SAAL,CAAeX,IAAf,CAApC;AACH,KAJD,CAIE,OAAOY,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,GARD,CAd+C,CAwB/C;;;AACAhB,EAAAA,SAAS,CAAC,MAAM;AAEZiB,IAAAA,OAAO,CAACC,GAAR,CAAYC,YAAZ;AACH,GAHQ,EAGN,CAACf,IAAD,CAHM,CAAT;;AAKA,QAAMgB,MAAM,GAAG,MAAMf,OAAO,CAAC,IAAD,CAA5B,CA9B+C,CAgC/C;AACA;AACA;;;AACA,QAAMgB,YAAY,GAAG;AACjBjB,IAAAA,IADiB;AAEjBM,IAAAA,KAFiB;AAGjBU,IAAAA;AAHiB,GAArB,CAnC+C,CAyC/C;AACA;AACA;;AACA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEC,YAA7B;AAAA,cACKlB;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GAjDuBD,Y;;KAAAA,Y","sourcesContent":["//Componente global que envuelve App desde Index\r\n//Luego, el Context.Provider es el que el envía la información a los children\r\n\r\nimport axios from 'axios';\r\nimport { createContext, useState, useEffect } from 'react';\r\n\r\n\r\n// Se exporta para que archivos externos puedan consumir dicho contexto\r\n// Exportamos la instancia del objecto Context\r\nexport const AuthContext = createContext();\r\n\r\n\r\n// Creamos un componente Provider el cual recibe como props los children\r\nexport default function AuthProvider({ children }) {\r\n    const [user, setUser] = useState(() => {\r\n        const val = window.localStorage.getItem('user');\r\n        if (val === 'true') return true;\r\n            else return false;\r\n    })\r\n\r\n\r\n    //const [user, setUser] = useState({id: 1, username: \"daramayo\"});\r\n\r\n    //Cuando la función 'login' sea ejecutada, almacenará al usuario\r\n    //Las userCredentials serán envíadas al momento de hacer click en \"Sign In\" de la página \"Login\"\r\n    //Hacemos la petición a la API para que nos traiga la información completa del usuario\r\n    //Una vez nos llegue la información se establecerán en \"setUser\"\r\n    const login = async (userCredentials) => {\r\n        try {\r\n            await axios.post(\"auth/login\", userCredentials);\r\n            setUser(userCredentials);\r\n            window.localStorage.setItem('user', JSON.stringify(user));\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    //Save credentials in Local Storage\r\n    useEffect(() => {\r\n        \r\n        console.log(initialState)\r\n    }, [user]);\r\n\r\n    const logout = () => setUser(null);\r\n\r\n    //Información que se quiere transmitir a los componentes hijos\r\n    //Todo debería estar memorizado\r\n    //El usuario será leído en App para saber si existe o no un usuario en session\r\n    const contextValue = {\r\n        user,\r\n        login,\r\n        logout\r\n    };\r\n\r\n    //El contextValue es el valor enviado a los hijos (children)\r\n    //En este caso, contextValue tiene un objeto llamado \"user\"\r\n    //Se crea el AuthContext y PROVEE el valor contextValue\r\n    return (\r\n        <AuthContext.Provider value={contextValue}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}