{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\damia\\\\OneDrive\\\\Escritorio\\\\1. Dami\\xE1n\\\\Estudio\\\\Programaci\\xF3n\\\\Web\\\\4. Personal\\\\Proyectos\\\\prueba\\\\frontend\\\\src\\\\auth\\\\AuthProvider.js\",\n    _s = $RefreshSig$();\n\n//Componente global que envuelve App desde Index\n//Luego, el Context.Provider es el que el envía la información a los children\nimport { createContext, useState } from 'react'; // Se exporta para que archivos externos puedan consumir dicho contexto\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport default function AuthProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  //const [user, setUser] = useState(null);\n  const [user, setUser] = useState({\n    id: 1,\n    username: \"daramayo\"\n  }); //Cuando la función 'login' sea ejecutada, almacenará al usuario\n  //Las userCredentials serán envíadas al momento de hacer click en \"Sign In\" de la página \"Login\"\n  //Hacemos la petición a la API para que nos traiga la información completa del usuario\n  //Una vez nos llegue la información se establecerán en \"setUser\"\n  //const login = (userCredentials) => setUser({id: 1, username: \"daramayo\"})\n\n  const logout = () => setUser(null);\n\n  const isLogged = () => !!user; //Información que se quiere transmitir a los componentes hijos\n  //Todo debería estar memorizado\n  //El usuario será leído en App para saber si existe o no un usuario en session\n\n\n  const contextValue = {\n    user,\n    isLogged,\n    login,\n    logout\n  }; //El contextValue es el valor enviado a los hijos (children)\n  //En este caso, contextValue tiene un objeto llamado \"user\"\n  //Se crea el AuthContext y PROVEE el valor contextValue\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AuthProvider, \"xNQV0AIONw51OPClACjlYz7bOkg=\");\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["C:/Users/damia/OneDrive/Escritorio/1. Damián/Estudio/Programación/Web/4. Personal/Proyectos/prueba/frontend/src/auth/AuthProvider.js"],"names":["createContext","useState","AuthContext","AuthProvider","children","user","setUser","id","username","logout","isLogged","contextValue","login"],"mappings":";;;AAAA;AACA;AAEA,SAASA,aAAT,EAAwBC,QAAxB,QAAwC,OAAxC,C,CAEA;;;AACA,OAAO,MAAMC,WAAW,gBAAGF,aAAa,EAAjC;AAEP,eAAe,SAASG,YAAT,OAAoC;AAAA;;AAAA,MAAd;AAAEC,IAAAA;AAAF,GAAc;AAC/C;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC;AAACM,IAAAA,EAAE,EAAE,CAAL;AAAQC,IAAAA,QAAQ,EAAE;AAAlB,GAAD,CAAhC,CAF+C,CAI/C;AACA;AACA;AACA;AACA;;AACA,QAAMC,MAAM,GAAG,MAAMH,OAAO,CAAC,IAAD,CAA5B;;AAEA,QAAMI,QAAQ,GAAG,MAAM,CAAC,CAACL,IAAzB,CAX+C,CAa/C;AACA;AACA;;;AACA,QAAMM,YAAY,GAAG;AACjBN,IAAAA,IADiB;AAEjBK,IAAAA,QAFiB;AAGjBE,IAAAA,KAHiB;AAIjBH,IAAAA;AAJiB,GAArB,CAhB+C,CAuB/C;AACA;AACA;;AACA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEE,YAA7B;AAAA,cACMP;AADN;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GA/BuBD,Y;;KAAAA,Y","sourcesContent":["//Componente global que envuelve App desde Index\r\n//Luego, el Context.Provider es el que el envía la información a los children\r\n\r\nimport { createContext, useState } from 'react';\r\n\r\n// Se exporta para que archivos externos puedan consumir dicho contexto\r\nexport const AuthContext = createContext();\r\n\r\nexport default function AuthProvider({ children }) {\r\n    //const [user, setUser] = useState(null);\r\n    const [user, setUser] = useState({id: 1, username: \"daramayo\"});\r\n\r\n    //Cuando la función 'login' sea ejecutada, almacenará al usuario\r\n    //Las userCredentials serán envíadas al momento de hacer click en \"Sign In\" de la página \"Login\"\r\n    //Hacemos la petición a la API para que nos traiga la información completa del usuario\r\n    //Una vez nos llegue la información se establecerán en \"setUser\"\r\n    //const login = (userCredentials) => setUser({id: 1, username: \"daramayo\"})\r\n    const logout = () => setUser(null);\r\n\r\n    const isLogged = () => !!user;\r\n\r\n    //Información que se quiere transmitir a los componentes hijos\r\n    //Todo debería estar memorizado\r\n    //El usuario será leído en App para saber si existe o no un usuario en session\r\n    const contextValue = {\r\n        user,\r\n        isLogged,\r\n        login,\r\n        logout\r\n    };\r\n\r\n    //El contextValue es el valor enviado a los hijos (children)\r\n    //En este caso, contextValue tiene un objeto llamado \"user\"\r\n    //Se crea el AuthContext y PROVEE el valor contextValue\r\n    return (\r\n        <AuthContext.Provider value={contextValue}>\r\n            { children }\r\n        </AuthContext.Provider>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}