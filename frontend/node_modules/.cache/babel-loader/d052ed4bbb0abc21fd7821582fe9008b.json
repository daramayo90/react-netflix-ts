{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\damia\\\\OneDrive\\\\Escritorio\\\\1. Dami\\xE1n\\\\Estudio\\\\Programaci\\xF3n\\\\Web\\\\4. Personal\\\\Proyectos\\\\react-netflix-ts\\\\frontend\\\\src\\\\auth\\\\AuthProvider.js\",\n    _s = $RefreshSig$();\n\n//Componente global que envuelve App desde Index\n//Luego, el Context.Provider es el que el envía la información a los children\nimport axios from 'axios';\nimport { createContext, useState, useEffect } from 'react'; // Se exporta para que archivos externos puedan consumir dicho contexto\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nconst local = JSON.parse(localStorage.getItem('user'));\nexport default function AuthProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  //The initial State should have the user at the moment of the login\n  //If there is no user, the value it's null (firts login)\n  const [user, setUser] = useState(() => {\n    if (local) return local;else return null;\n  }); //Save credentials in Local Storage\n\n  useEffect(() => {\n    localStorage.setItem('user', JSON.stringify(user));\n  }, [user]); //Cuando la función 'login' sea ejecutada, almacenará al usuario\n  //Las userCredentials serán envíadas al momento de hacer click en \"Sign In\" de la página \"Login\"\n  //Hacemos la petición a la API para que nos traiga la información completa del usuario\n  //Una vez nos llegue la información se establecerán en \"setUser\"\n\n  const login = async userCredentials => {\n    try {\n      await axios.post(\"auth/login\", userCredentials);\n      setUser(userCredentials);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const register = async userCredentials => {\n    try {\n      await axios.post(\"auth/register\", userCredentials);\n      setUser(userCredentials);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const logout = () => {\n    setUser(null);\n    localStorage.setItem('avatar', null);\n  }; //Información que se quiere transmitir a los componentes hijos\n  //Todo debería estar memorizado\n  //El usuario será leído en App para saber si existe o no un usuario en session\n\n\n  const contextValue = {\n    user,\n    login,\n    register,\n    logout\n  }; //El contextValue es el valor enviado a los hijos (children)\n  //En este caso, contextValue tiene un objeto llamado \"user\"\n  //Se crea el AuthContext y PROVEE el valor contextValue\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AuthProvider, \"nENNp79H5GYeY3iomS+Zff39u3c=\");\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["C:/Users/damia/OneDrive/Escritorio/1. Damián/Estudio/Programación/Web/4. Personal/Proyectos/react-netflix-ts/frontend/src/auth/AuthProvider.js"],"names":["axios","createContext","useState","useEffect","AuthContext","local","JSON","parse","localStorage","getItem","AuthProvider","children","user","setUser","setItem","stringify","login","userCredentials","post","error","console","log","register","logout","contextValue"],"mappings":";;;AAAA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD,C,CAEA;;;AACA,OAAO,MAAMC,WAAW,gBAAGH,aAAa,EAAjC;AACP,MAAMI,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAd;AAEA,eAAe,SAASC,YAAT,OAAoC;AAAA;;AAAA,MAAd;AAAEC,IAAAA;AAAF,GAAc;AAC/C;AACA;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,MAAM;AACnC,QAAIG,KAAJ,EAAW,OAAOA,KAAP,CAAX,KACK,OAAO,IAAP;AACR,GAH+B,CAAhC,CAH+C,CAQ/C;;AACAF,EAAAA,SAAS,CAAC,MAAM;AACZK,IAAAA,YAAY,CAACM,OAAb,CAAqB,MAArB,EAA6BR,IAAI,CAACS,SAAL,CAAeH,IAAf,CAA7B;AACH,GAFQ,EAEN,CAACA,IAAD,CAFM,CAAT,CAT+C,CAa/C;AACA;AACA;AACA;;AACA,QAAMI,KAAK,GAAG,MAAOC,eAAP,IAA2B;AACrC,QAAI;AACA,YAAMjB,KAAK,CAACkB,IAAN,CAAW,YAAX,EAAyBD,eAAzB,CAAN;AACAJ,MAAAA,OAAO,CAACI,eAAD,CAAP;AACH,KAHD,CAGE,OAAOE,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,GAPD;;AASA,QAAMG,QAAQ,GAAG,MAAOL,eAAP,IAA2B;AACxC,QAAI;AACA,YAAMjB,KAAK,CAACkB,IAAN,CAAW,eAAX,EAA4BD,eAA5B,CAAN;AACAJ,MAAAA,OAAO,CAACI,eAAD,CAAP;AACH,KAHD,CAGE,OAAOE,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,GAPD;;AAUA,QAAMI,MAAM,GAAG,MAAM;AACjBV,IAAAA,OAAO,CAAC,IAAD,CAAP;AACAL,IAAAA,YAAY,CAACM,OAAb,CAAqB,QAArB,EAA+B,IAA/B;AACH,GAHD,CApC+C,CAyC/C;AACA;AACA;;;AACA,QAAMU,YAAY,GAAG;AACjBZ,IAAAA,IADiB;AAEjBI,IAAAA,KAFiB;AAGjBM,IAAAA,QAHiB;AAIjBC,IAAAA;AAJiB,GAArB,CA5C+C,CAmD/C;AACA;AACA;;AACA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEC,YAA7B;AAAA,cACKb;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GA3DuBD,Y;;KAAAA,Y","sourcesContent":["//Componente global que envuelve App desde Index\r\n//Luego, el Context.Provider es el que el envía la información a los children\r\n\r\nimport axios from 'axios';\r\nimport { createContext, useState, useEffect } from 'react';\r\n\r\n// Se exporta para que archivos externos puedan consumir dicho contexto\r\nexport const AuthContext = createContext();\r\nconst local = JSON.parse(localStorage.getItem('user'));\r\n\r\nexport default function AuthProvider({ children }) {\r\n    //The initial State should have the user at the moment of the login\r\n    //If there is no user, the value it's null (firts login)\r\n    const [user, setUser] = useState(() => {\r\n        if (local) return local;\r\n        else return null;\r\n    });\r\n\r\n    //Save credentials in Local Storage\r\n    useEffect(() => {\r\n        localStorage.setItem('user', JSON.stringify(user));\r\n    }, [user]);\r\n\r\n    //Cuando la función 'login' sea ejecutada, almacenará al usuario\r\n    //Las userCredentials serán envíadas al momento de hacer click en \"Sign In\" de la página \"Login\"\r\n    //Hacemos la petición a la API para que nos traiga la información completa del usuario\r\n    //Una vez nos llegue la información se establecerán en \"setUser\"\r\n    const login = async (userCredentials) => {\r\n        try {\r\n            await axios.post(\"auth/login\", userCredentials);\r\n            setUser(userCredentials);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    const register = async (userCredentials) => {\r\n        try {\r\n            await axios.post(\"auth/register\", userCredentials);\r\n            setUser(userCredentials);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n\r\n    const logout = () => {\r\n        setUser(null);\r\n        localStorage.setItem('avatar', null);\r\n    }\r\n\r\n    //Información que se quiere transmitir a los componentes hijos\r\n    //Todo debería estar memorizado\r\n    //El usuario será leído en App para saber si existe o no un usuario en session\r\n    const contextValue = {\r\n        user,\r\n        login,\r\n        register,\r\n        logout\r\n    };\r\n\r\n    //El contextValue es el valor enviado a los hijos (children)\r\n    //En este caso, contextValue tiene un objeto llamado \"user\"\r\n    //Se crea el AuthContext y PROVEE el valor contextValue\r\n    return (\r\n        <AuthContext.Provider value={contextValue}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}